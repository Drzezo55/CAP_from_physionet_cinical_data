devtools::install_github("liulab-dfci/RIMA")
install.packages("RIMA")
BiocManager::install("RIMA")
install.packages(c("tidyverse", "data.table", "RIMA", "Seurat", "ggplot2"))
install.packages("immunarch")
library(immunarch)  # Load the package into R
data(immdata)  # Load the test dataset
View(immdata)
immdata[["data"]][["A2-i131"]]
repExplore(immdata$data, "lens") %>% vis()  # Visualise the length distribution of CDR3
repClonality(immdata$data, "homeo") %>% vis()  # Visualise the relative abundance of clonotypes
repExplore(immdata$data, "lens") %>% vis()  # Visualise the length distribution of CDR3
repClonality(immdata$data, "homeo") %>% vis()  # Visualise the relative abundance of clonotypes
repExplore(bcr_df, "lens") %>% vis()  # Visualise the length distribution of CDR3
repExplore(bcr_df$cdr3, "lens") %>% vis()  # Visualise the length distribution of CDR3
repExplore(bcr_freq, "lens") %>% vis()  # Visualise the length distribution of CDR3
help(scReportiore)
devtools::install_github("liulab-dfci/RIMA")
devtools::install_github("liulab-dfci/RIMA")
devtools::install_github("liulab-dfci/RIMA")
load("~/Desktop/community-acquired-pneumonia-endotypes-and-phenotypes-nacef-prospective-observational-cohort-study-of-translational-medicine-2.0.0/cleaned.RData")
cleaned_data$sofa_72
install.packages("skimr")
library(skimr)
skim(cleaned_data)
library(gtsummary)
install.packages("gtsummary")
library(gtsummary)
tbl_summary(cleaned_data)   # auto-summary table
tbl_summary(
data = cleaned_data,
exclude = c("record_id", "admission_date")
)
tbl_summary(
data = cleaned_data %>% select(-record_id, -admission_date)
)
View(cleaned_data)
cleaned_data$admission_month_name <- NULL
data <-  cleaned_data[!is.na(cleaned_data),]
View(data)
sum(is.na(cleaned_data))
sum(is.na(data))
data <-  cleaned_data[complete.cases(cleaned_data),]
View(data)
sum(is.na(data))
class(data$sofa_72)
ggplot(data, aes(x = sofa_72)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of SOFA Scores at 72h", x = "SOFA Score", y = "Count")
library(ggplot2)
ggplot(data, aes(x = sofa_72)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of SOFA Scores at 72h", x = "SOFA Score", y = "Count")
ggplot(data, aes(y = sofa_72)) +
geom_boxplot(fill = "orange") +
labs(title = "SOFA Score at 72h", y = "Score")
ggplot(data, aes(x = "", y = sofa_72)) +  # x="" makes a single violin
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +  # optional: overlay boxplot
labs(title = "Violin Plot of SOFA Score at 72h",
x = "",
y = "SOFA Score") +
theme_minimal()
ggplot(data, aes(x = "", y = sofa_72)) +  # x="" makes a single violin
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +  # optional: overlay boxplot
labs(title = "Violin Plot of SOFA Score at 72h",
x = "",
y = "SOFA Score") +
theme_minimal()
ggplot(data, aes(x = gender, y = sofa_72, fill = gender)) +
geom_violin(trim = FALSE, color = "black") +   # violin plot by gender
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +  # overlay boxplot
labs(title = "SOFA Score at 72h by Gender",
x = "Gender",
y = "SOFA Score") +
theme_minimal() +
scale_fill_manual(values = c("Male" = "skyblue", "Female" = "pink"))
ggplot(data, aes(x = "", y = sofa_72)) +  # x="" makes a single violin
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +  # optional: overlay boxplot
labs(title = "Violin Plot of SOFA Score at 72h",
x = "",
y = "SOFA Score") +
theme_minimal()
library(ggplot2)
library(plotly)
# Create ggplot
p <- ggplot(data, aes(x = "", y = sofa_72)) +
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +
labs(title = "Violin Plot of SOFA Score at 72h",
x = "",
y = "SOFA Score") +
theme_minimal()
# Convert to interactive plot
ggplotly(p)
library(ggplot2)
library(plotly)
# Create ggplot
p <- ggplot(data, aes(x = "", y = sofa_72)) +
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +
labs(title = "Violin Plot of SOFA Score at 72h",
x = "",
y = "SOFA Score") +
theme_minimal()
# Convert to interactive plot
ggplotly(p)
ggplot(data, aes(x = "", y = sofa_72)) +  # x="" makes a single violin
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +  # optional: overlay boxplot
labs(title = "Violin Plot of SOFA Score at 72h",
x = "",
y = "SOFA Score") +
theme_minimal()
Q1 <- quantile(data$sofa_72, 0.25, na.rm = TRUE)
Q3 <- quantile(data$sofa_72, 0.75, na.rm = TRUE)
IQR_value <- Q3 - Q1
lower <- Q1 - 1.5 * IQR_value
upper <- Q3 + 1.5 * IQR_value
data_no_outliers <- subset(data, sofa_72 >= lower & sofa_72 <= upper)
ggplot(data_no_outliers, aes(x = "", y = sofa_72)) +
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white") +
labs(title = "Violin Plot of SOFA Score at 72h (no outliers)",
x = "",
y = "SOFA Score") +
theme_minimal()
ggplot(data, aes(x = "", y = sofa_72)) +  # x="" makes a single violin
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +  # optional: overlay boxplot
labs(title = "Violin Plot of SOFA Score at 72h",
x = "",
y = "SOFA Score") +
theme_minimal()
Q <- quantile(data$sofa_72, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(data$sofa_72)
up <-  Q[2]+1.5*iqr # Upper Range
low<- Q[1]-1.5*iqr # Lower Rangeï»¿
eliminated<- subset(data, data$sofa_72 > (Q[1] - 1.5*iqr) & data$sofa_72 < (Q[2]+1.5*iqr))
ggbetweenstats(eliminated, sofa_72, outlier.tagging = TRUE)
install.packages("ggstatsplot")
library(ggstatsplot)
ggbetweenstats(eliminated, sofa_72, outlier.tagging = TRUE)
ggbetweenstats(
data = eliminated,
x = gender,        # grouping variable (categorical)
y = sofa_72,       # numeric variable
outlier.tagging = TRUE
)
ggbetweenstats(
data = eliminated,
y = sofa_72,       # numeric variable
outlier.tagging = TRUE
)
ggbetweenstats(
data = eliminated,
x = gender,        # grouping variable (categorical)
y = sofa_72,       # numeric variable
outlier.tagging = TRUE
)
ggplot(eliminated, aes(x = "", y = sofa_72)) +  # x="" makes a single violin
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +  # optional: overlay boxplot
labs(title = "Violin Plot of SOFA Score at 72h",
x = "",
y = "SOFA Score") +
theme_minimal()
ggplot(data, aes(x = sofa_72)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of SOFA Scores at 72h", x = "SOFA Score", y = "Count")
ggplot(data, aes(y = sofa_72)) +
geom_boxplot(fill = "orange") +
labs(title = "SOFA Score at 72h", y = "Score")
ggplot(data, aes(x = "", y = sofa_72)) +  # x="" makes a single violin
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +  # optional: overlay boxplot
labs(title = "Violin Plot of SOFA Score at 72h",
x = "",
y = "SOFA Score") +
theme_minimal()
ggplot(eliminated, aes(x = "", y = sofa_72)) +  # x="" makes a single violin
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +  # optional: overlay boxplot
labs(title = "Violin Plot of SOFA Score at 72h",
x = "",
y = "SOFA Score") +
theme_minimal()
cor(eliminated$sofa_72, eliminated$age, use = "complete.obs", method = "pearson")
# Spearman correlation (rank-based, non-parametric)
cor(eliminated$sofa_72, eliminated$age, use = "complete.obs", method = "spearman")
ggplot(eliminated, aes(x = age, y = sofa_72)) +
geom_point(color = "blue", alpha = 0.6) +  # scatter points
geom_smooth(method = "lm", color = "red") +  # regression line
labs(title = "Correlation between Age and SOFA Score at 72h",
x = "Age",
y = "SOFA Score") +
theme_minimal()
cor(eliminated$sofa_72, eliminated$gender, use = "complete.obs", method = "pearson")
cor(eliminated$sofa_72, eliminated$weight, use = "complete.obs", method = "pearson")
cor(eliminated$sofa_72, eliminated$admission_sofa, use = "complete.obs", method = "pearson")
ggplot(eliminated, aes(x = age, y = sofa_72)) +
geom_point(color = "blue", alpha = 0.6) +  # scatter points
geom_smooth(method = "lm", color = "red") +  # regression line
labs(title = "Correlation between SOFA admission and SOFA Score at 72h",
x = "Age",
y = "SOFA Score") +
theme_minimal()
library(ggpubr)
ggscatter(eliminated, x = "age", y = "sofa_72",
add = "reg.line",            # regression line
add.params = list(color = "red", fill = "lightgray"),
conf.int = TRUE) +            # confidence interval
stat_cor(method = "pearson")        # shows correlation coefficient on plot
ggscatter(eliminated, x = "admission_sofa", y = "sofa_72",
add = "reg.line",            # regression line
add.params = list(color = "red", fill = "lightgray"),
conf.int = TRUE) +            # confidence interval
stat_cor(method = "pearson")        # shows correlation coefficient on plot
model <- lm(sofa_72 ~ ., data = eliminated)
# Check number of unique values per column
sapply(eliminated, function(x) length(unique(x)))
cols_to_use <- sapply(eliminated, function(x) length(unique(x)) > 1)
# Keep only those columns
eliminated_filtered <- eliminated[, cols_to_use]
# Make sure categorical variables are factors
eliminated_filtered[] <- lapply(eliminated_filtered, function(x) {
if(is.character(x)) as.factor(x) else x
})
# Fit multiple linear regression
# sofa_72 is dependent variable, all others are predictors
predictors <- setdiff(names(eliminated_filtered), "sofa_72")
formula <- as.formula(paste("sofa_72 ~", paste(predictors, collapse = " + ")))
predictors_safe <- paste0("`", predictors, "`")
# Create formula
formula <- as.formula(paste("sofa_72 ~", paste(predictors_safe, collapse = " + ")))
# Fit the model
model <- lm(formula, data = eliminated_filtered)
# View summary
summary(model)
cols_to_use
predictors
summary(model)
eliminated_filtered$admission_date <- NULL
# Make sure categorical variables are factors
eliminated_filtered[] <- lapply(eliminated_filtered, function(x) {
if(is.character(x)) as.factor(x) else x
})
# Fit multiple linear regression
# sofa_72 is dependent variable, all others are predictors
# Wrap all predictor names in backticks
predictors <- setdiff(names(eliminated_filtered), "sofa_72")
predictors_safe <- paste0("`", predictors, "`")
# Create formula
formula <- as.formula(paste("sofa_72 ~", paste(predictors_safe, collapse = " + ")))
# Fit the model
model <- lm(formula, data = eliminated_filtered)
# View summary
summary(model)
predictors
predictors_safe <- paste0("`", predictors, "`")
formula <- as.formula(paste("sofa_72 ~", paste(predictors_safe, collapse = " + ")))
model <- lm(formula, data = eliminated_filtered)
summary(model)
ggplot(model, aes(.fitted, .resid)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(title = "Residuals vs Fitted Values",
x = "Fitted values",
y = "Residuals") +
theme_minimal()
# Add predicted values to your dataframe
eliminated_filtered$sofa_pred <- predict(model)
# Scatter plot of actual vs predicted
ggplot(eliminated_filtered, aes(x = sofa_pred, y = sofa_72)) +
geom_point(alpha = 0.6, color = "blue") +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(title = "Predicted vs Actual SOFA_72",
x = "Predicted SOFA_72",
y = "Actual SOFA_72") +
theme_minimal()
ggplot(model, aes(.fitted, .resid)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(title = "Residuals vs Fitted Values",
x = "Fitted values",
y = "Residuals") +
theme_minimal()
ggplot(eliminated, aes(x = "admission_month_num", y = sofa_72)) +  # x="" makes a single violin
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +  # optional: overlay boxplot
labs(title = "Violin Plot of SOFA Score at 72h",
x = "",
y = "SOFA Score") +
theme_minimal()
ggplot(eliminated, aes(x = "", y = sofa_72)) +  # x="" makes a single violin
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +  # optional: overlay boxplot
labs(title = "Violin Plot of SOFA Score at 72h",
x = "",
y = "SOFA Score") +
theme_minimal()
ggplot(eliminated_filtered, aes(x = "", y = sofa_72)) +  # x="" makes a single violin
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +  # optional: overlay boxplot
labs(title = "Violin Plot of SOFA Score at 72h",
x = "",
y = "SOFA Score") +
theme_minimal()
ggplot(eliminated_filtered, aes(x = factor(admission_month_num), y = sofa_72)) +
geom_violin(fill = "skyblue", color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +
labs(title = "Violin Plot of SOFA Score at 72h by Admission Month",
x = "Admission Month",
y = "SOFA Score") +
theme_minimal()
ggplot(eliminated_filtered, aes(x = factor(admission_month_num), y = sofa_72, fill = factor(admission_month_num))) +
geom_violin(color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +
labs(title = "Violin Plot of SOFA Score at 72h by Admission Month",
x = "Admission Month",
y = "SOFA Score",
fill = "Month") +
theme_minimal()
ggplot(eliminated_filtered, aes(x = factor(admission_month_num), y = admission_sofa, fill = factor(admission_month_num))) +
geom_violin(color = "black", width = 0.8) +
geom_boxplot(width = 0.1, fill = "white", outlier.color = "red") +
labs(title = "Violin Plot of SOFA Score at 72h by Admission Month",
x = "Admission Month",
y = "SOFA Score",
fill = "Month") +
theme_minimal()
ggplot(eliminated, aes(x = gender, y = sofa_72, fill = gender)) +
geom_violin() + geom_boxplot(width = 0.1)
ggplot(eliminated, aes(x = gender, y = admission_sofa, fill = gender)) +
geom_violin() + geom_boxplot(width = 0.1)
set.seed(123)
cluster_data <- eliminated_filtered[, sapply(eliminated_filtered, is.numeric)]
km <- kmeans(cluster_data, centers = 3)
eliminated_filtered$cluster <- as.factor(km$cluster)
eliminated_filtered$cluster
table(eliminated_filtered$cluster)
ggplot(eliminated_filtered, aes(x = cluster, y = sofa_72, fill = cluster)) +
geom_violin() +
geom_boxplot(width = 0.1, fill = "white") +
labs(title = "SOFA_72 by Cluster", x = "Cluster", y = "SOFA_72") +
theme_minimal()
cluster_data <- eliminated_filtered[, sapply(eliminated_filtered, is.numeric)]
# Optional: scale data (recommended for PCA)
cluster_data_scaled <- scale(cluster_data)
pca <- prcomp(cluster_data_scaled, center = TRUE, scale. = TRUE)
summary(pca)
library(ggplot2)
pca_df <- as.data.frame(pca$x)
pca_df$cluster <- eliminated_filtered$cluster  # add cluster info
ggplot(pca_df, aes(x = PC1, y = PC2, color = cluster)) +
geom_point(size = 2, alpha = 0.7) +
labs(title = "PCA of Patients based on Numeric Variables",
x = "PC1", y = "PC2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")
biplot(pca, scale = 0)
explained_var <- pca$sdev^2 / sum(pca$sdev^2)
barplot(explained_var, names.arg = paste0("PC", 1:length(explained_var)),
main = "Variance Explained by Principal Components", col = "skyblue")
eliminated <- eliminated %>%
mutate(sofa_group = case_when(
sofa_72 <= 4 ~ "Low",
sofa_72 <= 8 ~ "Medium",
TRUE ~ "High"
))
library(dplyr)
eliminated <- eliminated %>%
mutate(sofa_group = case_when(
sofa_72 <= 4 ~ "Low",
sofa_72 <= 8 ~ "Medium",
TRUE ~ "High"
))
table(eliminated$sofa_group)
eliminated$sofa_group <- factor(eliminated$sofa_group, levels = c("Low", "Medium", "High"))
install.packages("nnet")
library(nnet)
predictors <- setdiff(names(eliminated), c("sofa_72", "sofa_group", "record_id", "admission_date", "dicharge_date"))
predictors
formula <- as.formula(paste("sofa_group ~", paste(predictors, collapse = " + ")))
eliminated_filtered$sofa_group <- factor(eliminated_filtered$sofa_group, levels = c("Low", "Medium", "High"))
eliminated_filtered<- eliminated_filtered %>%
mutate(sofa_group = case_when(
sofa_72 <= 4 ~ "Low",
sofa_72 <= 8 ~ "Medium",
TRUE ~ "High"
))
eliminated_filtered$sofa_group <- factor(eliminated_filtered$sofa_group, levels = c("Low", "Medium", "High"))
# Install if needed
# Fit multinomial logistic regression using all variables except identifiers
# Exclude variables like record_id, admission_date, dicharge_date
predictors <- setdiff(names(eliminated_filtered), c("sofa_72", "sofa_group", "record_id", "admission_date", "dicharge_date"))
# Build formula
formula <- as.formula(paste("sofa_group ~", paste(predictors, collapse = " + ")))
eliminated_filtered
levels(eliminated_filtered$sofa_group)
eliminated_filtered$sofa_group <- factor(eliminated_filtered$sofa_group, levels = c("Low", "Medium", "High"))
predictors <- setdiff(names(eliminated_filtered), c("sofa_72", "sofa_group", "record_id", "admission_date", "dicharge_date"))
formula <- as.formula(paste("sofa_group ~", paste(predictors, collapse = " + ")))
names(eliminated) <- make.names(names(eliminated))
predictors <- setdiff(names(eliminated_filtered), c("sofa_72", "sofa_group", "record_id", "admission_date", "dicharge_date"))
formula <- as.formula(paste("sofa_group ~", paste(predictors, collapse = " + ")))
# Exclude outcome and identifiers
predictors <- setdiff(names(eliminated), c("sofa_72", "sofa_group", "record_id", "admission_date", "dicharge_date"))
# Build formula
formula <- as.formula(paste("sofa_group ~", paste(predictors, collapse = " + ")))
formula
model <- multinom(formula, data = eliminated_filtered)
formula <- as.formula(paste("sofa_group ~", paste(predictors, collapse = " + ")))
model <- multinom(formula, data = eliminated_filtered)
names(eliminated_filtered) <- make.names(names(eliminated_filtered))
# Exclude outcome and identifiers
predictors <- setdiff(names(eliminated_filtered), c("sofa_72", "sofa_group", "record_id", "admission_date", "dicharge_date"))
# Build formula
formula <- as.formula(paste("sofa_group ~", paste(predictors, collapse = " + ")))
# Fit model
model <- multinom(formula, data = eliminated_filtered)
summary(model)
model$xlevels
exp(coef(model))  # exponentiate to get odds ratios
z <- summary(model)$coefficients / summary(model)$standard.errors
p_values <- (1 - pnorm(abs(z), 0, 1)) * 2
p_values
pred_probs <- predict(model, type = "probs")
head(pred_probs)
table(Predicted = pred_class, Actual = eliminated_filtered$sofa_group)
pred_class <- predict(model)
head(pred_class)
table(Predicted = pred_class, Actual = eliminated_filtered$sofa_group)
mean(pred_class == eliminated_filtered$sofa_group)
library(ggplot2)
library(tidyr)
# Extract coefficients and compute odds ratios
coefs <- summary(model)$coefficients
ses <- summary(model)$standard.errors
z <- coefs / ses
pvals <- (1 - pnorm(abs(z), 0, 1)) * 2
odds_ratios <- exp(coefs)
# Convert to tidy data frame
coef_df <- as.data.frame(odds_ratios)
coef_df$Predictor <- rownames(coef_df)
coef_long <- coef_df %>%
pivot_longer(cols = -Predictor, names_to = "Outcome", values_to = "OddsRatio")
# Plot
ggplot(coef_long, aes(x = reorder(Predictor, OddsRatio), y = OddsRatio, fill = Outcome)) +
geom_col(position = "dodge") +
coord_flip() +
labs(title = "Odds Ratios from Multinomial Logistic Regression",
x = "Predictor",
y = "Odds Ratio") +
theme_minimal()
library(caret)
pred_class <- predict(model)
conf_mat <- table(Predicted = pred_class, Actual = eliminated_filtered$sofa_group)
# Visualize as heatmap
library(reshape2)
conf_long <- melt(conf_mat)
ggplot(conf_long, aes(x = Actual, y = Predicted, fill = value)) +
geom_tile() +
geom_text(aes(label = value), color = "white") +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Confusion Matrix", x = "Actual SOFA Group", y = "Predicted SOFA Group") +
theme_minimal()
pred_probs <- predict(model, type = "probs")
pred_df <- cbind(eliminated_filtered, pred_probs)
# Average predicted probability by gender
library(dplyr)
pred_summary <- pred_df %>%
group_by(gender) %>%
summarize(across(c(Low, Medium, High), mean))
# Convert to long format for plotting
pred_long <- pred_summary %>%
pivot_longer(cols = c(Low, Medium, High), names_to = "SOFA_Group", values_to = "Pred_Prob")
ggplot(pred_long, aes(x = gender, y = Pred_Prob, fill = SOFA_Group)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Predicted Probability of SOFA Groups by Gender",
x = "Gender", y = "Predicted Probability") +
theme_minimal()
renv:init()
library(renv)
renv:init()
renv::init()
renv::snapshot()
renv::snapshot()
renv::status()
renv::init()
renv::init(force = TRUE)
renv::init()
renv::init(force = TRUE)# Exclude specific columns by name
library(here)
library(here)
here()
setwd("~/Desktop/community-acquired-pneumonia-endotypes-and-phenotypes-nacef-prospective-observational-cohort-study-of-translational-medicine-2.0.0")
renv::init(force = TRUE)# Exclude specific columns by name
renv::snapshot()
renv::status()
renv::status()
renv::snapshot()
renv::snapshot(type = "all")
renv::restore()
renv::status()
renv::init(bare = TRUE)
renv::snapshot()
renv::status()
renv::snapshot()
renv::restore()
